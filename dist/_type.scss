////
/// Type mixins provide mixins for styling text.
/// @group Type
////

@use "./_variables.scss" as *;

/// Render text in a light weight (300)
@mixin avenir-light() {
  font-weight: 300; font-style: normal;
}

/// Render text in an italic light weight (300)
@mixin avenir-light-italic() {
  font-weight: 300; font-style: italic;
}

/// Render text in a regular weight (400);
@mixin avenir-regular() {
  font-weight: 400; font-style: normal;
}

/// Render text in italics
@mixin avenir-italic() {
  font-weight: 400; font-style: italic;
}

@mixin avenir-demi() {
  font-weight: 700; font-style: normal;
}

@mixin avenir-demi-italic() {
  font-weight: 700; font-style: italic;
}

/// Render text in a bold weight (700)
@mixin avenir-bold() {
  font-weight: 700; font-style: normal;
}

/// Render text in italic bold
@mixin avenir-bold-italic() {
  font-weight: 700; font-style: italic;
}

/// Apply styles for monospace code font. Updates font-family, tracking, and style
@mixin code-face() {
  @include tracking($code-tracking);
  font-family: $code-family; font-weight: 400; font-style: normal;
  b, strong {font-weight: 400;}
}

/// Apply styles for italic monospace code font.
@mixin code-italic() {
  @include tracking($code-tracking);
  font-family: $code-family; font-weight: 400; font-style: italic;
  b, strong {font-weight: 400;}
}

/// Space characters in a word horizontally
/// @param {number} $n - positive or negative number (0 is normal)
/// @example scss
///   @include tracking(100);
@mixin tracking($n) {
  letter-spacing: $n * 0.001em;
}

/// Add space between words
/// @param {number} $n - positive or negative number (0 is normal)
/// @example scss - word-spacing mixin
///   @include word-spacing(200); // add lots of space between each word
@mixin word-spacing($n) {
  word-spacing: $n * 0.001em;
}

/// Space lines of text vertically
/// @param {number} $n - positive number (1 is normal)
/// @example scss
///   @include leading(2); // twice as much vertical space
@mixin leading($n) {
  line-height: $n * $baseline;
}

/// Display element inline
@mixin text-inline() {
  display: inline;
}

/// align text in the center
@mixin text-center() {
  text-align: center;
}

/// align text to the left (right in rtl)
@mixin text-left() {
  text-align: left;
  @include rtl {
    text-align: right;
  }
}

/// align text to the right (left in rtl)
@mixin text-right() {
  text-align: right;
  @include rtl {
    text-align: left;
  }
}

/// lower the opacity of text to make it more subtle (be careful to retain accessible contrast ratio)
@mixin text-light() {
  opacity: 0.66;
}

/// add overflow-ellipsis to the element when ther eis more text than will fit on one line
@mixin text-ellipsis() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// Apply a color to text
/// @param {string} $value - any valid CSS color value or variable
/// @example scss
///   @include color($blue);
@mixin text-color($value) {
  color: $value;
}

/// Apply one color normally, and another on hover
/// @param {string} $value - any valid CSS color value or variable
/// @param {string} $light-value - any valid CSS color value or variable
/// @example scss
///   @include link-color($blue, $light-blue); // text will be blue, but light blue while hovering
@mixin link-color($value, $light-value) {
  color: $value;
  &:hover {
    color: $light-value;
  }
}

@function modular-scale($increment, $targetRatio) {
  $v1: $body-size;
  $v2: $small-size;
  $value: $v1;

  @while $v2 > $v1 {
    $v2: ($v2 / $targetRatio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $targetRatio); // will fix off-by-1
  }

  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $targetRatio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $targetRatio);
      } @else {
        $v1: ($v1 * $targetRatio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    $unit: $body-size/16;
    $decriment: $increment * $unit;
    $value: $body-size + $decriment;
  }

  @return $value;
}

/// Apply responsive text sizing to an element.
/// Use only whole numbers to maintain proper typographic scale.
/// @param {number} $n - negative or positive number (0 is default size)
/// @param {number} $line-height - line-height you'd like to use (default chosen based on size)
/// @example scss
///   @include font-size(-1); // one step smaller on the scale
///   @include font-size(2, 1.25); // two steps larger on the scale, 1.25 line-height
@mixin font-size($n, $line-height: null) {
  font-size: modular-scale($n, $ratio);
  @if $line-height {
    line-height: $line-height;
  } @else {
    @if $n > 7 {
      line-height: $baseline-ratio*.85;
    }
    @else if $n <= 7 and $n > 5 {
      line-height: $baseline-ratio*.875;
    }
    @else if $n <= 5 and $n > 3 {
      line-height: $baseline-ratio*.9;
    }
    @else if $n <= 3 and $n > 2 {
      line-height: $baseline-ratio*.925;
    }
    @else if $n <= 2 {
      line-height: $baseline-ratio;
    }
  }
  @if $n > 0 {
    @media screen and (max-width: $viewport-medium - 1) {
      font-size: modular-scale($n, $medium-ratio);
    }
    @media screen and (max-width: $viewport-small - 1) {
      font-size: modular-scale($n, $small-ratio);
    }
  }
}
